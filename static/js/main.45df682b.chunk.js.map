{"version":3,"sources":["serviceWorker.js","containers/ErrorBoundry.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorBoundry","state","hasError","error","info","this","setState","props","children","React","Component","Card","name","email","id","className","src","alt","CardList","robots","cardComponent","onSelection","isSelected","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","overflowX","height","App","searchValue","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","searchRobots","isPending","requestRobots","dispatch","event","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.45df682b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    const { hasError } = this.state;\r\n    return hasError ? (\r\n      <h1>Oooops! Something went wrong!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"col-lg-4 col-sm-6 mb-5\">\r\n      <div className=\"card bg-info border border-light shadow text-center h-100 mx-auto\">\r\n        <img\r\n          src={`https://robohash.org/${id}>200x200`}\r\n          alt=\"robots\"\r\n          className=\"img-fluid\"\r\n        />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots, onSelection, isSelected }) => {\r\n  const cardComponent = robots.map((user) => {\r\n    return (\r\n      <Card key={user.id} name={user.name} email={user.email} id={user.id} />\r\n    );\r\n  });\r\n  return <div className=\"row p-3\">{cardComponent}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"form-group border border-primary rounded mx w-100 mt-3\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"search robots\"\r\n        className=\"form-control \"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        overflowX: \"hidden\",\r\n        height: \"80vh\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import ErrorBoundry from \"./ErrorBoundry\";\r\nimport React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/Searchbox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchValue: state.searchRobots.searchValue,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    robots: state.requestRobots.robots,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { searchValue, onSearchChange, robots } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchValue.toLowerCase());\r\n    });\r\n\r\n    return !robots.length ? (\r\n      <h1 className=\"text-center logo mt-5\">Loading...</h1>\r\n    ) : (\r\n      <div className=\"container mt-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <h1 className=\"logo text-center\">RoboFriends</h1>\r\n          </div>\r\n          <div className=\"offset-md-4 col-md-4 col-10 offset-1\">\r\n            <SearchBox searchChange={onSearchChange} />\r\n          </div>\r\n        </div>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_VALUE,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_VALUE,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_VALUE = \"CHANGE_SEARCH_VALUE\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_PENDING\";\r\n","import {\r\n  CHANGE_SEARCH_VALUE,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n  searchValue: \"\",\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  error: \"\",\r\n  robots: [],\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_VALUE:\r\n      return Object.assign({}, state, {\r\n        searchValue: action.payload.toLowerCase(),\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {\r\n        isPending: true,\r\n      });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        robots: action.payload,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        error: action.payload,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}